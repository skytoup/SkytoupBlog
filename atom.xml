<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[skytoup blog]]></title>
  <subtitle><![CDATA[分享个人经验]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://skytoup.wicp.net/"/>
  <updated>2015-11-27T09:29:17.000Z</updated>
  <id>http://skytoup.wicp.net/</id>
  
  <author>
    <name><![CDATA[skytoup]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IntelliJ IDEA开发golang环境配置]]></title>
    <link href="http://skytoup.wicp.net/2015/11/26/IntelliJ-IDEA%E5%BC%80%E5%8F%91golang%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://skytoup.wicp.net/2015/11/26/IntelliJ-IDEA开发golang环境配置/</id>
    <published>2015-11-26T14:50:00.000Z</published>
    <updated>2015-11-27T09:29:17.000Z</updated>
    <content type="html"><![CDATA[<p>看到一篇文章说IntelliJ IDEA开发作为Go的开发环境不错，突然发神经地想试了一下。<br>谁知道跟着教程走，到后面越来越不对劲，去百度其它教程，谁知道千篇一律。。。</p>
<p>好了下面开始了</p>
<ol>
<li>首先把<code>GO</code>安装好。。。（自行安装，附上一篇我之前写的<a href="http://blog.csdn.net/skytoup/article/details/48877839" target="_blank" rel="external">MAC安装GO</a>）</li>
<li>安装<code>IntelliJ IDEA</code>，下载地址: <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="external">https://www.jetbrains.com/idea/download/</a>。</li>
<li>下载<code>go-lang-idea-plugin</code>这个插件，下载地址: <a href="https://plugins.jetbrains.com/plugin/5047" target="_blank" rel="external">https://plugins.jetbrains.com/plugin/5047</a>。(PS:网上百度的基本都是下源码、编译，搞了一个下午编译，谁知道有已经编译好的可以下载)</li>
<li><p>下载之后，是一个zip文件，不需要解压，打开IntelliJ IDEA，打开<code>Preferences-&gt;Plugins</code>，点击<code>Install plugin from disk...</code>，选择刚下载的zip文件，然后重启一下，插件就这样安装好了。<br><img src="http://img.blog.csdn.net/20151126221741634" alt="install plugin"></p>
</li>
<li><p>打开<code>File-&gt;Project Structure...</code>，找不到的随便打开一个项目就能看到。点击<code>SDKS</code>，新建一个<code>GO SDK</code>，填上<code>GO</code>的安装目录。<br><img src="http://img.blog.csdn.net/20151126221854291" alt="SDKS"></p>
</li>
</ol>
<p><img src="http://img.blog.csdn.net/20151126221922557" alt="Setting SDKS"></p>
<p>使用:随便新建一个Go项目，点击<code>Edit Configurations...</code>，新建一个<code>Go Application</code>，右边<code>File</code>你的<code>pack main</code>包含<code>func main</code>的文件，<code>Output directory</code>为编译后的文件输出目录。新建完毕后，选择新建的Debug选项就可以编译、运行程序了。<br><img src="http://img.blog.csdn.net/20151126222007589" alt="img"></p>
<p><img src="http://img.blog.csdn.net/20151126222027329" alt="img"></p>
<p><img src="http://img.blog.csdn.net/20151126222042301" alt="img"></p>
<p>接下来来点IntelliJ IDEA的快捷键吧(我的是Mac OSX) :</p>
<ol>
<li>CMD+Shift+O    查找跳转文件</li>
<li>CMD+Shift+L    代码对齐</li>
<li>CMD+Shift+Alt+F    go fmt 一个文件</li>
<li>CMD+Shift+Alt+P    go fmt整个项目</li>
<li>CMD+Alt+O    自动import</li>
<li>CMD+F12    显示当前文件的结构</li>
<li>按住CMD点击结构体可以源码跳转</li>
<li>CMD+P    显示函数参数</li>
<li>CMD+E    显示最近编辑文件</li>
<li>Alt+Enter    自动修复错误</li>
<li>Shift+F6    重构</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到一篇文章说IntelliJ IDEA开发作为Go的开发环境不错，突然发神经地想试了一下。<br>谁知道跟着教程走，到后面越来越不对劲，去百度其它教程，谁知道千篇一律。。。</p>
<p>好了下面开始了</p>
<ol>
<li>首先把<code>GO</code>安装好]]>
    </summary>
    
      <category term="Go" scheme="http://skytoup.wicp.net/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MacOs下安装go lang]]></title>
    <link href="http://skytoup.wicp.net/2015/10/03/MacOs%E4%B8%8B%E5%AE%89%E8%A3%85go-lang/"/>
    <id>http://skytoup.wicp.net/2015/10/03/MacOs下安装go-lang/</id>
    <published>2015-10-03T05:15:00.000Z</published>
    <updated>2015-11-27T09:34:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-下载安装包">1.下载安装包</h2><blockquote>
<p>由于官网被墙了，所以到国内的一个go论坛下载:<a href="http://golangtc.com/download" target="_blank" rel="external">点击进入下载</a><br><img src="http://img.blog.csdn.net/20151003131401247" alt="download"><br>下载后，双击进行安装。</p>
</blockquote>
<h2 id="2-配置环境变量">2.配置环境变量</h2><blockquote>
<p>$GOROOT:go lang 安装目录<br>  $GOPATH:go lang 工作目录，有点像Eclipse那样子    </p>
</blockquote>
<p>下面开始配置<br>到终端输入以下命令:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile # &#25171;&#24320;&#29615;&#22659;&#21464;&#37327;&#37197;&#32622;</span><br></pre></td></tr></table></figure></p>
<p>在最下面添加<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=/Users/(&#29992;&#25143;&#21517;/&#36335;&#24452;) # &#25913;&#25104;&#20320;&#21916;&#27426;&#30340;&#36335;&#24452;&#10;export GOROOT=/usr/local/go # &#40664;&#35748;&#23433;&#35013;&#37117;&#24066;&#36825;&#20010;&#36335;&#24452;</span><br></pre></td></tr></table></figure></p>
<p>添加完毕后，退出vim<br>到终端输入以下命令:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile # &#35753;&#29615;&#22659;&#21464;&#37327;&#37197;&#32622;&#29983;&#25928;</span><br></pre></td></tr></table></figure></p>
<p>完成后，到$GOPATH的目录下，新建三个文件夹<br><img src="http://img.blog.csdn.net/20151003131439905" alt="new dir"></p>
<pre><code><span class="attribute">bin</span>:存放编译后的可执行文件;
<span class="attribute">pkg</span>:存放编译后的包文件;
<span class="attribute">src</span>:存放项目源文件;
</code></pre><p>最后，到终端输入以下命令验证时候安装成功:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20151003131454906" alt="go version"><br>出现类似图中则为成功，若不成功，请检测一下你的环境变量配置。</p>
<h2 id="3-IDE">3.IDE</h2><blockquote>
<p>一.Sublime Text(个人比较喜欢)<br>安装好SublimeText后，再安装插件管理器，到插件管理器安装处，输入GoSublime，回车安装<br>安装完成后，还要安装一个语法提示插件:<br>到终端输入一下命令:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/nsf/gocode&#10;go install github.com/nsf/gocode</span><br></pre></td></tr></table></figure></p>
<p>二.LiteIDE<br>下载地址:<a href="http://www.golangtc.com/download/liteide" target="_blank" rel="external">LiteIDE</a></p>
<blockquote>
<p><img src="http://img.blog.csdn.net/20151003131512470" alt="LiteIDE"><br>  下载其中一个即可<br>  解压即可用</p>
</blockquote>
<p>三.Wide<br>项目地址:<a href="https://github.com/b3log/wide" target="_blank" rel="external">Wide项目</a><br>官网地址:<a href="https://wide.b3log.org/login" title="wide" target="_blank" rel="external">官网</a><br>下载后，使用go来运行，在浏览器打开指定的ip和端口即可使用(详情请参考<a href="https://wide.b3log.org/login" title="wide" target="_blank" rel="external">官网</a>)</p>
</blockquote>
<h2 id="4-学习Go_lang">4.学习Go lang</h2><ul>
<li>官方教程:<a href="http://tour.studygolang.com/welcome/1" target="_blank" rel="external">免翻墙</a></li>
<li>Go语言中文网:<a href="http://studygolang.com/" target="_blank" rel="external">Go语言中文网</a></li>
<li>GoLang中国:<a href="http://www.golangtc.com/" target="_blank" rel="external">GoLang中国</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-下载安装包">1.下载安装包</h2><blockquote>
<p>由于官网被墙了，所以到国内的一个go论坛下载:<a href="http://golangtc.com/download" target="_blank" rel="external">点击]]>
    </summary>
    
      <category term="Go" scheme="http://skytoup.wicp.net/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS metaio虚拟现实-位置 demo]]></title>
    <link href="http://skytoup.wicp.net/2015/08/27/iOS-metaio%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E-%E4%BD%8D%E7%BD%AE-demo/"/>
    <id>http://skytoup.wicp.net/2015/08/27/iOS-metaio虚拟现实-位置-demo/</id>
    <published>2015-08-27T04:13:00.000Z</published>
    <updated>2015-11-27T09:29:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="LocationARTest">LocationARTest</h1><h3 id="测试环境：Xcode_6，iOS_7-0(真机)以上。">测试环境：Xcode 6，iOS 7.0(真机)以上。</h3><p>基于Metaio的demo修改出来的，查看周边的美食</p>
<p>github链接 : <a href="https://github.com/skytoup/LocationARTest" target="_blank" rel="external">https://github.com/skytoup/LocationARTest</a></p>
<p><img src="https://github.com/skytoup/LocationARTest/raw/master/1.gif" alt="GIF"></p>
<h2 id="注意">注意</h2><p>本demo不能直接运行</p>
<ul>
<li><p>需要修改JHKey.h中的JH_ID(修改为你的聚合id，并到聚合数据网站申请数据)</p>
<pre><code>聚合数据账号注册：<span class="string">http:</span><span class="comment">//www.juhe.cn/</span>
数据申请：<span class="string">http:</span><span class="comment">//www.juhe.cn/docs/api/id/45</span>
</code></pre></li>
<li><p>需要修改Info.plist中的MetaioLicenseString</p>
<pre><code>MetaioLicense申请：<span class="string">http:</span><span class="comment">//metaio.com/</span>
</code></pre></li>
<li><p>由于MetaioSDK.framework有300+M，github限制单文件100M，所以无法上传</p>
<pre><code>请自行到Metaio官网下载<span class="string">http:</span><span class="comment">//metaio.com/</span>
</code></pre></li>
</ul>
<h3 id="用到的其他工具">用到的其他工具</h3><p><a href="https://github.com/skytoup/JsonToModule" target="_blank" rel="external">JsonToModule</a>:一个命令行工具，能把json文件转换成java或者objc的模型类</p>
<h3 id="用到的第三方库">用到的第三方库</h3><ul>
<li><a href="http://metaio.com/" target="_blank" rel="external">metaioSDK.framework</a></li>
<li><a href="http://www.juhe.cn/" target="_blank" rel="external">JuheApisSDK</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="LocationARTest">LocationARTest</h1><h3 id="测试环境：Xcode_6，iOS_7-0(真机)以上。">测试环境：Xcode 6，iOS 7.0(真机)以上。</h3><p>基于Metaio的demo修改出来的，查看周边的美]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS价格日历]]></title>
    <link href="http://skytoup.wicp.net/2015/08/27/iOS%E4%BB%B7%E6%A0%BC%E6%97%A5%E5%8E%86/"/>
    <id>http://skytoup.wicp.net/2015/08/27/iOS价格日历/</id>
    <published>2015-08-27T02:17:00.000Z</published>
    <updated>2015-11-27T09:29:25.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SkyCalendarPriceView">SkyCalendarPriceView</h1><hr>
<h2 id="测试环境：Xcode_6，iOS_7-0以上。">测试环境：Xcode 6，iOS 7.0以上。</h2><p>github地址 : <a href="https://github.com/skytoup/SkyCalendarPriceView" target="_blank" rel="external">https://github.com/skytoup/SkyCalendarPriceView</a></p>
<p><img src="https://github.com/skytoup/SkyCalendarPriceView/raw/master/1.gif" alt="GIF"></p>
<h2 id="简介">简介</h2><p>一个可以自定义样式的价格日历</p>
<ul>
<li>高度封装，简单使用，传入对应的数据模型即可显示</li>
<li>灵活度高，大部分view的样式可调整</li>
<li>显示的文字可自定义处理，也可以自定义和系统处理一起使用</li>
<li>可在Xib或StoryBoard中拖拽使用，也支持自动布局，也可以手写固定的Frame</li>
<li>支持旋屏</li>
</ul>
<hr>
<h2 id="使用方法">使用方法</h2><p>把头文件 <code>SkyCalendarPriceView.h</code> 导入项目。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"SkyCalendarPriceView.h"</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="基本使用">基本使用</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建价格日历</span></span><br><span class="line">SkyCalendarPriceView *v = [SkyCalendarPriceView calendarPriceView];</span><br><span class="line">   <span class="comment">// 创建数据模型</span></span><br><span class="line">   SkyCalendarPriceModel *model = [SkyCalendarPriceModel calendarPriceModelWithYear:@(<span class="number">2015</span>) withMonth:@(<span class="number">3</span>) withDay:@(<span class="number">22</span>) withPrice:@(<span class="number">30</span>) withCount:@(<span class="number">10</span>)];</span><br><span class="line">   SkyCalendarPriceModel *model2 = [SkyCalendarPriceModel calendarPriceModelWithYear:@(<span class="number">2015</span>) withMonth:@(<span class="number">9</span>) withDay:@(<span class="number">22</span>) withPrice:@(<span class="number">10</span>) withCount:@(<span class="number">10</span>)];</span><br><span class="line">   SkyCalendarPriceModel *model3 = [SkyCalendarPriceModel calendarPriceModelWithYear:@(<span class="number">2015</span>) withMonth:@(<span class="number">7</span>) withDay:@(<span class="number">24</span>) withPrice:@(<span class="number">20</span>) withCount:@(<span class="number">10</span>)];</span><br><span class="line">   <span class="comment">// 导入数据模型</span></span><br><span class="line">   _v<span class="variable">.datas</span> = @[model, model2, model3];</span><br><span class="line">   <span class="comment">// 设置今天的时间，可不设置</span></span><br><span class="line">   _v<span class="variable">.today</span> = [<span class="built_in">NSDate</span> date];</span><br></pre></td></tr></table></figure>
<h3 id="定制样式">定制样式</h3><p>详情请看<a href="SkyCalendarPriceView/SkyCalendarPriceViewConfig.h">SkyCalendarPriceViewConfig.h</a></p>
<h3 id="代码修改部分view样式">代码修改部分view样式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可通过调用以下几个方法</span></span><br><span class="line"></span><br><span class="line">SkyCalendarHeader</span><br><span class="line">+ (<span class="keyword">void</span>)SkyCalendarPriceViewInitHeaderViewOfYearMonthViewStyleWithBlock:(<span class="keyword">void</span>(^)(<span class="built_in">UIView</span> *view))block</span><br><span class="line">+ (<span class="keyword">void</span>)SkyCalendarPriceViewInitHeaderViewOfWeekLabelsStyleWithBlock:(<span class="keyword">void</span>(^)(<span class="built_in">NSArray</span> *labels))block;</span><br><span class="line"></span><br><span class="line">SkyCalendarCell</span><br><span class="line">+ (<span class="keyword">void</span>)SkyCalendarPriceViewInitCellStyleWithBlock:(<span class="keyword">void</span>(^)(<span class="built_in">UICollectionViewCell</span> *cell))block;</span><br></pre></td></tr></table></figure>
<h3 id="自定义显示的数据样式">自定义显示的数据样式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过实现SkyCalendarPriceViewDelegate的方法进行显示自定义的数据样式</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span>*)skyCalendarPriceView:(SkyCalendarPriceView*)cview cellDataStringDictionaryWithIndexPath:(<span class="built_in">NSIndexPath</span>*)indexPath withYear:(<span class="built_in">NSString</span>*)year withMonth:(<span class="built_in">NSString</span>*)month withDay:(<span class="built_in">NSString</span>*)day withPrice:(<span class="built_in">NSString</span>*)price withCount:(<span class="built_in">NSString</span>*)count withIsToday:(<span class="built_in">BOOL</span>)isToady;</span><br><span class="line">- (<span class="built_in">NSString</span>*)skyCalendarPriceView:(SkyCalendarPriceView*)cview cellDayStringWithYear:(<span class="built_in">NSString</span>*)year withMonth:(<span class="built_in">NSString</span>*)month withDay:(<span class="built_in">NSString</span>*)day withIsToday:(<span class="built_in">BOOL</span>)isToday;</span><br><span class="line">- (<span class="built_in">NSString</span>*)skyCalendarPriceView:(SkyCalendarPriceView *)cview headerLabelStringWithYear:(<span class="built_in">NSString</span>*)year withMonth:(<span class="built_in">NSString</span>*)month;</span><br></pre></td></tr></table></figure>
<h3 id="若不需要header停留在顶部">若不需要header停留在顶部</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更换默认布局（注:Xib或StoryBoard中，需手动在代码或面板里设置Layout，设置的Layout需要为UICollectionViewFlowLayout的子类）</span></span><br><span class="line">skyCalendarPriceView<span class="variable">.collectionViewLayout</span> = [<span class="built_in">UICollectionViewFlowLayout</span> new];</span><br></pre></td></tr></table></figure>
<h3 id="监听选中/取消选中日期">监听选中/取消选中日期</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过实现SkyCalendarPriceViewDelegate的方法进行监听</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)skyCalendarPriceView:(SkyCalendarPriceView*)cview shouldSelectIndexWithPriceModel:(SkyCalendarPriceModel*)model;</span><br><span class="line">- (<span class="keyword">void</span>)skyCalendarPriceView:(SkyCalendarPriceView*)cview didUnselectIndexWithPriceModel:(SkyCalendarPriceModel*)model;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SkyCalendarPriceView">SkyCalendarPriceView</h1><hr>
<h2 id="测试环境：Xcode_6，iOS_7-0以上。">测试环境：Xcode 6，iOS 7.0以上。</h2><p>github地址 : <a hr]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS UIView自定义四个边角的圆角]]></title>
    <link href="http://skytoup.wicp.net/2015/08/12/UIView%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%9B%E4%B8%AA%E8%BE%B9%E8%A7%92%E7%9A%84%E5%9C%86%E8%A7%92/"/>
    <id>http://skytoup.wicp.net/2015/08/12/UIView自定义四个边角的圆角/</id>
    <published>2015-08-11T23:28:00.000Z</published>
    <updated>2015-11-27T09:29:32.000Z</updated>
    <content type="html"><![CDATA[<p>UIView背景色的四个边角自定义成圆角</p>
<p>比较简单，没什么好介绍的</p>
<p>GitHub链接：<a href="https://github.com/skytoup/SkyRadiusView" target="_blank" rel="external">https://github.com/skytoup/SkyRadiusView</a></p>
<p>测试环境：Xcode 6，iOS 7.0以上 </p>
<p><img src="http://img.blog.csdn.net/20150812072718059" alt="gif"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>UIView背景色的四个边角自定义成圆角</p>
<p>比较简单，没什么好介绍的</p>
<p>GitHub链接：<a href="https://github.com/skytoup/SkyRadiusView" target="_blank" rel="external]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[把json转成java、objc的module的小工具]]></title>
    <link href="http://skytoup.wicp.net/2015/08/06/%E6%8A%8Ajson%E8%BD%AC%E6%88%90java%E3%80%81objc%E7%9A%84module%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://skytoup.wicp.net/2015/08/06/把json转成java、objc的module的小工具/</id>
    <published>2015-08-06T12:31:00.000Z</published>
    <updated>2015-11-27T09:29:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><pre><code>一个把json文件，转换为java、objcetive-c的<span class="class"><span class="keyword">module</span>文件。</span>
暂不支持一个array的下一级，还是array
简单方便地处理后台返回的json数据，不必要一个一个字段复制到<span class="class"><span class="keyword">module</span>类上。</span>
</code></pre><h3 id="github">github</h3><pre><code>[<span class="link_label">json2module</span>](<span class="link_url">https://github.com/skytoup/JsonToModule</span>)
</code></pre><h3 id="用到的第三方开源库">用到的第三方开源库</h3><pre><code><span class="title">cJSON</span> c语言的json解析库
</code></pre><h3 id="基本的实现逻辑">基本的实现逻辑</h3><p><img src="http://img.blog.csdn.net/20150806202839772" alt="实现逻辑"></p>
<h3 id="编译">编译</h3><pre><code>命令行进入到项目根目录后
<span class="built_in">make</span>

测试:
    <span class="built_in">make</span> test
    测试生成的文件在项目目录下的out_file里面
</code></pre><h3 id="使用说明(English不是很好):">使用说明(English不是很好):</h3><pre><code>json2moudle &lt;json <span class="keyword">file</span> path&gt; [-n] [-o] [-p] [-h] [--java] [--objc]

option:
-n &lt;<span class="keyword">module</span> <span class="keyword">name</span>&gt;          <span class="keyword">default</span> is json <span class="keyword">file</span> <span class="keyword">name</span>
-o &lt;<span class="type">out</span> path&gt;              <span class="keyword">default</span> is run path
-p &lt;java <span class="built_in">pack</span> <span class="keyword">name</span>&gt;     <span class="keyword">default</span> is <span class="string">""</span>
-h                          help
--java                      <span class="type">out</span> java <span class="keyword">module</span> <span class="keyword">file</span>
--objc                      <span class="type">out</span> objective-c <span class="keyword">module</span> <span class="keyword">file</span>

<span class="keyword">if</span> not have --java or --objective-c, <span class="keyword">default</span> is java
</code></pre><h3 id="使用事例：">使用事例：</h3><pre><code>json2moudle t<span class="class">.json</span>
json2moudle t<span class="class">.json</span> -n test2 -o ~/Desktop/test -<span class="tag">p</span> test<span class="class">.com</span><span class="class">.hehe</span>
json2moudle t<span class="class">.json</span> -n test2 -o ~/Desktop/test
json2moudle t<span class="class">.json</span> -n test2 -o ~/Desktop/test -<span class="tag">p</span> test<span class="class">.com</span><span class="class">.hehe</span> --objc --java
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="简介">简介</h3><pre><code>一个把json文件，转换为java、objcetive-c的<span class="class"><span class="keyword">module</span>文件。</span>
暂不支持一个array的下一]]>
    </summary>
    
      <category term="c" scheme="http://skytoup.wicp.net/categories/c/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记录一下iOS的几个UIView的方法]]></title>
    <link href="http://skytoup.wicp.net/2015/08/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BiOS%E7%9A%84%E5%87%A0%E4%B8%AAUIView%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://skytoup.wicp.net/2015/08/04/记录一下iOS的几个UIView的方法/</id>
    <published>2015-08-04T13:42:00.000Z</published>
    <updated>2015-11-27T09:29:38.000Z</updated>
    <content type="html"><![CDATA[<p>在用自动布局的时候，老是忘记更新Constraint使用哪个方法，特意去查了一下资料，做了一下笔记。<br>如果出现错误的地方，希望大家指出，谢谢。</p>
<h3 id="UIView:">UIView:</h3><p>`// 重写此方法，当约束更新时，可更新你的特殊约束，别忘记调用super方法</p>
<ul>
<li>(void)updateConstraints;`</li>
</ul>
<p>`// 调用这个方法，会触发update Constraints的操作，即更新约束。在needsUpdateConstraints返回YES时，才能成功触发update Constraints的操作。我们不应该重写这个方法。</p>
<ul>
<li>(void)updateConstraintsIfNeeded;`</li>
</ul>
<p>`// 会调用drawRect方法</p>
<ul>
<li>(void)setNeedsDisplay;`</li>
</ul>
<p>`// 会默认调用layoutSubViews</p>
<ul>
<li>(void)setNeedsLayout;`</li>
</ul>
<p>`// 当一个自定义的View某一个属性的改变可能影响到界面布局，我们应该调用这个方法来告诉布局系统在未来某个时刻需要更新。系统会调用updateConstraints去更新布局。</p>
<ul>
<li>(void)setNeedsUpdateConstraints;`</li>
</ul>
<p>`// 布局系统使用这个返回值来确定是否调用updateConstraints</p>
<ul>
<li>(void)needsUpdateConstraints;`</li>
</ul>
<p><code>// 如果有刷新的标记(应该是指调用过-(void) setNeedsLayout这个方法吧)，立即调用layoutSubviews进行布局
-(void) layoutIfNeeded;</code></p>
<p>`// 自动调用layoutIfNeeded，当使用基于约束的布局基本实现适用于基于约束的布局，否则什么也不做。</p>
<ul>
<li>(void)layoutSubviews;`</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>在用自动布局的时候，老是忘记更新Constraint使用哪个方法，特意去查了一下资料，做了一下笔记。<br>如果出现错误的地方，希望大家指出，谢谢。</p>
<h3 id="UIView:">UIView:</h3><p>`// 重写此方法，当约束更新时，可更新你的特殊约束]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS一个带动画的等待指示器]]></title>
    <link href="http://skytoup.wicp.net/2015/07/06/iOS%E4%B8%80%E4%B8%AA%E5%B8%A6%E5%8A%A8%E7%94%BB%E7%9A%84%E7%AD%89%E5%BE%85%E6%8C%87%E7%A4%BA%E5%99%A8/"/>
    <id>http://skytoup.wicp.net/2015/07/06/iOS一个带动画的等待指示器/</id>
    <published>2015-07-06T07:59:00.000Z</published>
    <updated>2015-11-27T09:29:01.000Z</updated>
    <content type="html"><![CDATA[<h1 id="SkyWaitingView（github链接）">SkyWaitingView（<a href="https://github.com/skytoup/SkyWaitingView" target="_blank" rel="external">github链接</a>）</h1><hr>
<h2 id="测试环境：Xcode_6，iOS_7-0以上。">测试环境：Xcode 6，iOS 7.0以上。</h2><p><img src="https://raw.githubusercontent.com/skytoup/SkyWaitingView/master/1.gif" alt="GIF"></p>
<h2 id="简介">简介</h2><p>一个简单的等待指示器</p>
<ul>
<li>可自定义圆弧粗细、颜色、旋转速率</li>
<li>可自定义标签显示</li>
</ul>
<hr>
<h2 id="使用方法">使用方法</h2><p>把头文件 <code>SkyWaitingView.h</code> 导入项目，然后设置各属性，具体使用方法请参考示例项目。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SkyCircleWatingView *v = [SkyCircleWatingView new];</span><br><span class="line">v<span class="variable">.frame</span> = <span class="built_in">CGRectMake</span>(<span class="number">50</span>, baseY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">[v sizeToFit];</span><br><span class="line">[<span class="keyword">self</span><span class="variable">.view</span> addSubview:v];</span><br><span class="line">v<span class="variable">.rate</span> = <span class="number">1.</span>f;</span><br><span class="line">[v start];</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="关于我">关于我</h2><ul>
<li>一枚普通的即将大三的珠海大学生</li>
<li>希望大三实习、毕业的工作地方都在珠海</li>
</ul>
<hr>
<h2 id="联系方式">联系方式</h2><ul>
<li>QQ：875766917，请备注</li>
<li>QQMail：875766917@qq.com</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SkyWaitingView（github链接）">SkyWaitingView（<a href="https://github.com/skytoup/SkyWaitingView" target="_blank" rel="external">github链接]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构-链表]]></title>
    <link href="http://skytoup.wicp.net/2015/06/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
    <id>http://skytoup.wicp.net/2015/06/20/数据结构-链表/</id>
    <published>2015-06-20T07:54:00.000Z</published>
    <updated>2015-11-27T09:29:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="1-链表基础">1.链表基础</h1><p>链表是一段非连续物理地址的存储结构，通过节点的成员变量，存储其它单元格的地址，构成一条链，称为链表。</p>
<p><code>链表的结构如下图（画得不是很好）：</code><br><img src="http://img.blog.csdn.net/20150620152944636" alt="链表示意图"></p>
<p>这是一个双向链表，可以通过每一个节点，找到它的上一个节点，或者下一个节点。<br>如果为单向链表，则节点没有pre这个成员变量。</p>
<p>节点的结构体定义：<br>struct link_node {<br>    struct link_node <em>next; // 前一个节点<br>    struct link_node </em>pre; // 后一个节点<br>    void *val; // 节点值<br>};</p>
<p>一般来说，都会有一个存储链表头节点的结构体，如上图的第一个圆角矩形。</p>
<p>可以新建一个结构体来存储链表首节点，或者新建一个不存储数值的节点来存储首节点。</p>
<h1 id="2-优缺点">2.优缺点</h1><ul>
<li>动态创建节点来存储数据</li>
<li>插入节点快</li>
<li>读取指定位置节点慢</li>
<li>结构较简单</li>
</ul>
<h1 id="3-扩展">3.扩展</h1><ul>
<li>栈</li>
<li>循环链表</li>
<li>队列（双向队列、单向队列）</li>
<li>树、图、链地址法的哈希表 结构的基础</li>
<li>。。。。。（还有很多吧）</li>
</ul>
<p><img src="http://img.blog.csdn.net/20150620155207116" alt="栈"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-链表基础">1.链表基础</h1><p>链表是一段非连续物理地址的存储结构，通过节点的成员变量，存储其它单元格的地址，构成一条链，称为链表。</p>
<p><code>链表的结构如下图（画得不是很好）：</code><br><img src="http://i]]>
    </summary>
    
      <category term="数据结构" scheme="http://skytoup.wicp.net/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS三级联想菜单（SkyAssociationMenuView）]]></title>
    <link href="http://skytoup.wicp.net/2015/06/19/iOS%E4%B8%89%E7%BA%A7%E8%81%94%E6%83%B3%E8%8F%9C%E5%8D%95%EF%BC%88SkyAssociationMenuView%EF%BC%89/"/>
    <id>http://skytoup.wicp.net/2015/06/19/iOS三级联想菜单（SkyAssociationMenuView）/</id>
    <published>2015-06-19T06:14:00.000Z</published>
    <updated>2015-11-27T09:29:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="三级联想菜单（SkyAssociationMenuView）">三级联想菜单（SkyAssociationMenuView）</h1><h3 id="测试环境：Xcode_6，iOS_7-0以上。">测试环境：Xcode 6，iOS 7.0以上。</h3><p>以前做一个项目准备用来当做地区选择用的，后来没用上。。。。。</p>
<p>只是粗略的实现了一下，写得不是很好，望大家见谅。。。。。</p>
<p>github：<a href="https://github.com/skytoup/SkyAssociationMenuView" target="_blank" rel="external">https://github.com/skytoup/SkyAssociationMenuView</a></p>
<p>效果图：</p>
<p><img src="https://raw.githubusercontent.com/skytoup/SkyAssociationMenuView/master/1.gif" alt="GIF"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="三级联想菜单（SkyAssociationMenuView）">三级联想菜单（SkyAssociationMenuView）</h1><h3 id="测试环境：Xcode_6，iOS_7-0以上。">测试环境：Xcode 6，iOS 7.0以上。</h3><p>以]]>
    </summary>
    
      <category term="iOS" scheme="http://skytoup.wicp.net/categories/iOS/"/>
    
  </entry>
  
</feed>
